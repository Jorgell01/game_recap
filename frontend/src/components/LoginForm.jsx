import { useState } from "react"; // Importa el hook useState para manejar el estado
import toast from "react-hot-toast"; // Importa la librer√≠a para mostrar notificaciones
import "../components/LoginForm.css"; // Importa los estilos espec√≠ficos para este componente

// Componente principal para el formulario de inicio de sesi√≥n
const LoginForm = ({ onLogin }) => {
  const [email, setEmail] = useState(""); // Estado para almacenar el correo electr√≥nico ingresado
  const [password, setPassword] = useState(""); // Estado para almacenar la contrase√±a ingresada

  // Funci√≥n para manejar el inicio de sesi√≥n
  const handleLogin = async (e) => {
    e.preventDefault(); // Previene el comportamiento por defecto del formulario

    try {
      // Realiza una solicitud al backend para iniciar sesi√≥n
      const res = await fetch("http://localhost:3000/api/auth/login", {
        method: "POST", // M√©todo HTTP para enviar datos
        headers: { "Content-Type": "application/json" }, // Especifica el tipo de contenido
        body: JSON.stringify({ email, password }), // Env√≠a el correo y la contrase√±a en el cuerpo de la solicitud
      });

      const data = await res.json(); // Convierte la respuesta a JSON

      if (!res.ok) {
        // Si la respuesta no es exitosa, muestra un mensaje de error
        toast.error(data.error || "Error al iniciar sesi√≥n");
        return;
      }

      // Si el inicio de sesi√≥n es exitoso, guarda el token en el almacenamiento local
      localStorage.setItem("token", data.token);
      toast.success("¬°Sesi√≥n iniciada!"); // Muestra una notificaci√≥n de √©xito
      onLogin?.(); // Llama a la funci√≥n `onLogin` si est√° definida
    } catch (err) {
      // Si ocurre un error, muestra un mensaje de error
      toast.error("‚ùå Error al conectar con el servidor");
    }
  };

  // Renderiza el formulario de inicio de sesi√≥n
  return (
    <form className="login-form" onSubmit={handleLogin}>
      {/* Campo para ingresar el correo electr√≥nico */}
      <input
        type="email"
        placeholder="Correo electr√≥nico"
        value={email} // Valor actual del estado `email`
        onChange={(e) => setEmail(e.target.value)} // Actualiza el estado al escribir
        required // Campo obligatorio
      />

      {/* Campo para ingresar la contrase√±a */}
      <input
        type="password"
        placeholder="Contrase√±a"
        value={password} // Valor actual del estado `password`
        onChange={(e) => setPassword(e.target.value)} // Actualiza el estado al escribir
        required // Campo obligatorio
      />

      {/* Bot√≥n para enviar el formulario */}
      <button type="submit">Iniciar sesi√≥n</button>

      {/* Separador visual */}
      <hr style={{ margin: "1rem 0", borderColor: "var(--color-card)" }} />

      {/* Bot√≥n para iniciar sesi√≥n con Steam */}
      <button
        type="button"
        className="steam-button"
        onClick={() => {
          // Redirige al usuario a la ruta de autenticaci√≥n con Steam
          window.location.href = "http://localhost:3000/api/auth/steam";
        }}
      >
        üéÆ Iniciar sesi√≥n con Steam
      </button>
    </form>
  );
};

export default LoginForm; // Exporta el componente para usarlo en otros archivos
